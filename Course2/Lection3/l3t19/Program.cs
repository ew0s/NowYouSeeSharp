using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using System.Threading.Tasks;

namespace l3t19
{
    /*
     * В отдельном файле создайте абстрактный класс Client, который должен содержать:
     *      1) Публичное свойство Name, отвечающее за имя клиента.
     *      2) Приватное свойство TotalMoney, отвечающее за состояние счёта клиента.
     *      3) Публичное свойство AccountId, отвечающее за идентификацию счёта клиента.
     *      4) Метод PaymentRejected(), ничего не принимает, ничего не возвращает и который
     *         выбрасывает исключение, обозначающее невозможность осуществления операции при 
     *         указанных значениях аргумента. Метод не должен быть переопределен из классов наследников.
     *      5) Метод Validation(), который принимает Id аккаунта и сумму списания и, если списать возможно,
     *         списывает сумму с данного аккаунта, если аккаунт неверный или сумма превышает имеющуюся,
     *         отказывает в выполнении операции. Метод ничего не возвращает.
     *      6) Конструктор, который последовательно принимает и устанавливает значения для
     *         всех публичных полей класса.
     * Типы свойств определите самостоятельно.
     * В отдельном файле создайте интерфейс IPayable, содержащий метод Pay(), который:
     *      1) Пытается списать требуемое количество денег с текущего счёта экземпляра класса.
     * Добавьте поддержку интерфейса IPayable в класс Client, при этом саму реализацию метода Pay()
     * оставьте для его наследников.
     * Создайте два класса в отдельных файлах: RichCat и PoorDog, каждый их которых должен:
     *      1) Являться наследником класса Client.
     *      2) Не быть абстрактным.
     *      3) Должен реализовывать соответствующую логику недостающих элементов.
     */

    public class MagicBank
    {
        public static void Main(string[] args)
        { 

        }
    }
}
